cmake_minimum_required(VERSION 3.5)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin/test_binary)

include_directories(${CMAKE_SOURCE_DIR}/test/include)

add_library(conststring_test                      OBJECT   main_unit_test_ConstString.cpp                                         )
#add_library(container_ringbuffer_test             OBJECT   main_unit_test_container_RingBuffer.cpp                                )
add_library(decimal_test                          OBJECT   main_unit_test_Decimal.cpp                                             )
#add_library(graphic_color_Rgb565_test             OBJECT   main_unit_test_graphic_color_Rgb565.cpp                                )
#add_library(graphic_color_Rgb888_test             OBJECT   main_unit_test_graphic_color_Rgb888.cpp                                )
add_library(hexadecimal_test                      OBJECT   main_unit_test_Hexadecimal.cpp                                         )
#add_library(hardware_can_bitrate_test             OBJECT   main_unit_test_hardware_can_Bitrate.cpp                                )
#add_library(hardware_can_data_test                OBJECT   main_unit_test_hardware_can_Data.cpp                                   )
#add_library(hardware_can_id_test                  OBJECT   main_unit_test_hardware_can_Id.cpp                                     )
#add_library(hardware_can_message_test             OBJECT   main_unit_test_hardware_can_Message.cpp                                )
#add_library(hardware_spi_mode_test                OBJECT   main_unit_test_hardware_spi_Mode.cpp                                   )
add_library(hardware_uart_baudrate_test           OBJECT   main_unit_test_hardware_uart_Baudrate.cpp                              )
add_library(hardware_uart_databits_test           OBJECT   main_unit_test_hardware_uart_DataBits.cpp                              )
add_library(hardware_uart_parity_test             OBJECT   main_unit_test_hardware_uart_Parity.cpp                                )
add_library(hardware_uart_stopbits_test           OBJECT   main_unit_test_hardware_uart_StopBits.cpp                              )
#add_library(http_code_test                        OBJECT   main_unit_test_http_Code.cpp                                           )
#add_library(http_fragment_test                    OBJECT   main_unit_test_http_Fragment.cpp                                       )
#add_library(http_fragmentparserserializer_test    OBJECT   main_unit_test_http_FragmentParserSerializer.cpp                       )
#add_library(http_query_test                       OBJECT   main_unit_test_http_Query.cpp                                          )
#add_library(http_queryparserserializer_test       OBJECT   main_unit_test_http_QueryParserSerializer.cpp                          )
#add_library(http_urlparsingerror_test             OBJECT   main_unit_test_http_UrlParsingError.cpp                                )
#add_library(http_version_test                     OBJECT   main_unit_test_http_Version.cpp                                        )
add_library(json_parser_test                      OBJECT   main_unit_test_json_Parser.cpp                                         )
add_library(json_parsingerror_test                OBJECT   main_unit_test_json_ParsingError.cpp                                   )
add_library(json_token_test                       OBJECT   main_unit_test_json_Token.cpp                                          )
add_library(json_tokentype_test                   OBJECT   main_unit_test_json_TokenType.cpp                                      )
#add_library(network_ip4address_test               OBJECT   main_unit_test_network_IpV4Address.cpp                                 )
#add_library(network_ip6address_test               OBJECT   main_unit_test_network_IpV6Address.cpp                                 )
#add_library(network_macaddress_test               OBJECT   main_unit_test_network_MacAddress.cpp                                  )
add_library(parser_defaulttoken_test              OBJECT   main_unit_test_parser_DefaultToken.cpp                                 )
add_library(parser_defaulttokentype_test          OBJECT   main_unit_test_parser_DefaultTokenType.cpp                             )
add_library(parser_inputhandled_test              OBJECT   main_unit_test_parser_InputHandled.cpp                                 )
add_library(parser_linecolumncounter_test         OBJECT   main_unit_test_parser_LineColumnCounter.cpp                            )
add_library(parser_textposition_test              OBJECT   main_unit_test_parser_TextPosition.cpp                                 )
add_library(parser_state_test                     OBJECT   main_unit_test_parser_State.cpp                                        )
add_library(parser_utf8parserserializer_test      OBJECT   main_unit_test_parser_Utf8ParserSerializer.cpp                         )
#add_library(physics_electricalresistance_test     OBJECT   main_unit_test_physics_ElectricalResistance.cpp                        )
#add_library(physics_frequency_test                OBJECT   main_unit_test_physics_Frequency.cpp                                   )
#add_library(physics_partsper_test                 OBJECT   main_unit_test_physics_PartsPer.cpp                                    )
#add_library(physics_temperature_test              OBJECT   main_unit_test_physics_Temperature.cpp                                 )
#add_library(physics_voltage_test                  OBJECT   main_unit_test_physics_Voltage.cpp                                     )
#add_library(software_githash_test                 OBJECT   main_unit_test_software_GitHash.cpp                                    )
#add_library(software_version_test                 OBJECT   main_unit_test_software_Version.cpp                                    )
add_library(state_activecloseerrorstate_test      OBJECT   main_unit_test_state_ActiveCloseErrorState.cpp                         )
add_library(state_defaulterror_test               OBJECT   main_unit_test_state_DefaultError.cpp                                  )

add_executable(automatic_test_ConstString                       $<TARGET_OBJECTS:conststring_test>                                )
#add_executable(automatic_test_container_RingBuffer              $<TARGET_OBJECTS:container_ringbuffer_test>                       )
add_executable(automatic_test_Decimal                           $<TARGET_OBJECTS:decimal_test>                                    )
#add_executable(automatic_test_graphic_color_Rgb565              $<TARGET_OBJECTS:graphic_color_Rgb565_test>                       )
#add_executable(automatic_test_graphic_color_Rgb888              $<TARGET_OBJECTS:graphic_color_Rgb888_test>                       )
add_executable(automatic_test_Hexadecimal                       $<TARGET_OBJECTS:hexadecimal_test>                                )
#add_executable(automatic_test_hardware_can_Bitrate              $<TARGET_OBJECTS:hardware_can_bitrate_test>                       )
#add_executable(automatic_test_hardware_can_Data                 $<TARGET_OBJECTS:hardware_can_data_test>                          )
#add_executable(automatic_test_hardware_can_Id                   $<TARGET_OBJECTS:hardware_can_id_test>                            )
#add_executable(automatic_test_hardware_can_Message              $<TARGET_OBJECTS:hardware_can_message_test>                       )
#add_executable(automatic_test_hardware_spi_Mode                 $<TARGET_OBJECTS:hardware_spi_mode_test>                          )
add_executable(automatic_test_hardware_uart_Baudrate            $<TARGET_OBJECTS:hardware_uart_baudrate_test>                     )
add_executable(automatic_test_hardware_uart_DataBits            $<TARGET_OBJECTS:hardware_uart_databits_test>                     )
add_executable(automatic_test_hardware_uart_Parity              $<TARGET_OBJECTS:hardware_uart_parity_test>                       )
add_executable(automatic_test_hardware_uart_StopBits            $<TARGET_OBJECTS:hardware_uart_stopbits_test>                     )
#add_executable(automatic_test_http_Code                         $<TARGET_OBJECTS:http_code_test>                                  )
#add_executable(automatic_test_http_Fragment                     $<TARGET_OBJECTS:http_fragment_test>                              )
#add_executable(automatic_test_http_FragmentParserSerializer     $<TARGET_OBJECTS:http_fragmentparserserializer_test>              )
#add_executable(automatic_test_http_Query                        $<TARGET_OBJECTS:http_query_test>                                 )
#add_executable(automatic_test_http_QueryParserSerializer        $<TARGET_OBJECTS:http_queryparserserializer_test>                 )
#add_executable(automatic_test_http_UrlParsingError              $<TARGET_OBJECTS:http_urlparsingerror_test>                       )
#add_executable(automatic_test_http_Version                      $<TARGET_OBJECTS:http_version_test>                               )
add_executable(automatic_test_json_Parser                       $<TARGET_OBJECTS:json_parser_test>                                )
add_executable(automatic_test_json_ParsingError                 $<TARGET_OBJECTS:json_parsingerror_test>                          )
add_executable(automatic_test_json_Token                        $<TARGET_OBJECTS:json_token_test>                                 )
add_executable(automatic_test_json_TokenType                    $<TARGET_OBJECTS:json_tokentype_test>                             )
#add_executable(automatic_test_network_IpV4Address               $<TARGET_OBJECTS:network_ip4address_test>                         )
#add_executable(automatic_test_network_IpV6Address               $<TARGET_OBJECTS:network_ip6address_test>                         )
#add_executable(automatic_test_network_MacAddress                $<TARGET_OBJECTS:network_macaddress_test>                         )
add_executable(automatic_test_parser_DefaultToken               $<TARGET_OBJECTS:parser_defaulttoken_test>                        )
add_executable(automatic_test_parser_DefaultTokenType           $<TARGET_OBJECTS:parser_defaulttokentype_test>                    )
add_executable(automatic_test_parser_InputHandled               $<TARGET_OBJECTS:parser_inputhandled_test>                        )
add_executable(automatic_test_parser_LineColumnCounter          $<TARGET_OBJECTS:parser_linecolumncounter_test>                   )
add_executable(automatic_test_parser_TextPosition               $<TARGET_OBJECTS:parser_textposition_test>                        )
add_executable(automatic_test_parser_State                      $<TARGET_OBJECTS:parser_state_test>                               )
add_executable(automatic_test_parser_Utf8ParserSerializer       $<TARGET_OBJECTS:parser_utf8parserserializer_test>                )
#add_executable(automatic_test_physics_ElectricalResistance      $<TARGET_OBJECTS:physics_electricalresistance_test>               )
#add_executable(automatic_test_physics_Frequency                 $<TARGET_OBJECTS:physics_frequency_test>                          )
#add_executable(automatic_test_physics_PartsPer                  $<TARGET_OBJECTS:physics_partsper_test>                           )
#add_executable(automatic_test_physics_Temperature               $<TARGET_OBJECTS:physics_temperature_test>                        )
#add_executable(automatic_test_physics_Voltage                   $<TARGET_OBJECTS:physics_voltage_test>                            )
#add_executable(automatic_test_software_GitHash                  $<TARGET_OBJECTS:software_githash_test>                           )
#add_executable(automatic_test_software_Version                  $<TARGET_OBJECTS:software_version_test>                           )
add_executable(automatic_test_state_ActiveCloseErrorState       $<TARGET_OBJECTS:state_activecloseerrorstate_test>                )
add_executable(automatic_test_state_DefaultError                $<TARGET_OBJECTS:state_defaulterror_test>                         )

add_custom_command(MAIN_DEPENDENCY   ${CMAKE_CURRENT_SOURCE_DIR}/runtest.sh
                   OUTPUT            ${EXECUTABLE_OUTPUT_PATH}/runtest.sh
                   COMMAND           ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/runtest.sh
                                                              ${EXECUTABLE_OUTPUT_PATH}/runtest.sh
                   VERBATIM)

add_custom_target(script ALL DEPENDS ${EXECUTABLE_OUTPUT_PATH}/runtest.sh)
